def registry = "alexseedkou/docker-test";
def registryCredential = 'dockerhub';
def dockerImage = '';
def CONTINUE_BUILD = true;
def scmVars = '';
CONFIG_SERVICE_PASSWORD='123456'
NOTIFICATION_SERVICE_PASSWORD='123456'
STATISTICS_SERVICE_PASSWORD='123456'
ACCOUNT_SERVICE_PASSWORD='123456'
MONGODB_PASSWORD='123456'

node {
    
        stage('Checkout') {
            cmVars = checkout scm
            //git url: 'https://github.com/alexseedkou/piggymetrics.git', credentialsId: 'alexseedkou', branch: 'master'
        }

        // stage('Validation') {
        //     dir('config') {
        //         def strCount = sh(returnStdout: true, script: "git diff --name-only ${scmVars.GIT_COMMIT} ${scmVars.GIT_PREVIOUS_SUCCESSFUL_COMMIT} | grep config | wc -l").trim()
        //         if(strCount=="0") {
        //             echo "Skipping build no files updated"
        //             CONTINUE_BUILD = false
        //         } else {
        //             echo "Changes found in the servicelayer module"
        //         }
        //     }
        // }

        if (CONTINUE_BUILD) {

            try {

                    notifyBuild('STARTED')
            
                    stage('Build') {
                        sh 'mvn package -pl config -am'
                    }
            
                    stage('Image') {
                        dir ('config') {
                            dockerImage = docker.build registry + ":config-image$BUILD_NUMBER"
                            // app.push()
                        }
                    }

                    stage('Deploy Image') {
                        docker.withRegistry('', registryCredential) {
                            dockerImage.push()
                        }
                    }

                    stage('Remove Unused docker image') {
                        sh "docker rmi $registry:config-image$BUILD_NUMBER"
                    }
            
                    // stage ('Run') {
                    //     docker.image("localhost:5000/account-service:${env.version}").run('-p 2222:2222 -h account --name account --link discovery')
                    // }
            
                    // stage ('Final') {
                    //     build job: 'customer-service-pipeline', wait: false
                    // }   
            } catch (e) {
                    // If there was an exception thrown, the build failed
                    currentBuild.result = "FAILED"
                    throw e
            }  finally {
                    // Success or failure, always send notifications
                    notifyBuild(currentBuild.result)
            } 
        }
    
}
    
def notifyBuild(String buildStatus = 'STARTED') {
    // build status of null means successful
    buildStatus =  buildStatus ?: 'SUCCESSFUL'

    // Default values
    def colorName = 'RED'
    def colorCode = '#FF0000'
    // def buildUser = getBuildUser()
    def subject = "@channel ${buildStatus}: Job '${env.JOB_NAME} build [${env.BUILD_NUMBER}]\n"
    def summary = "${subject} More info at: (${env.BUILD_URL})"

    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESSFUL') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
    }

    // Send notifications
    slackSend (channel: '#deployment', color: colorCode, message: summary)
}   


def getBuildUser() {
    def buildCase = urrentBuild.rawBuild.getCause(Cause.UserIdCause);
    if (buildCase == null) {
        return null;
    } else {
        return currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()
    }
}
