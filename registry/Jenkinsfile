def registry = "alexseedkou/docker-test"
def registryCredential = 'dockerhub'
def dockerImage = ''
CONFIG_SERVICE_PASSWORD='123456'
NOTIFICATION_SERVICE_PASSWORD='123456'
STATISTICS_SERVICE_PASSWORD='123456'
ACCOUNT_SERVICE_PASSWORD='123456'
MONGODB_PASSWORD='123456'

node {

    try {
        notifyBuild('STARTED')
 
        stage('Checkout') {
            echo pwd()
            git url: 'https://github.com/alexseedkou/piggymetrics.git', credentialsId: 'alexseedkou', branch: 'master'
        }
 
        stage('Build') {
            sh 'mvn package -pl registry -am'
        }
 
        stage('Image') {
            dir ('config') {
                dockerImage = docker.build registry + ":registry-image$BUILD_NUMBER"
                // app.push()
            }
        }

        stage('Deploy Image') {
            docker.withRegistry('', registryCredential) {
                dockerImage.push()
            }
        }

        stage('Remove Unused docker image') {
            sh "docker rmi $registry:registry-image$BUILD_NUMBER"
        }
 
        // stage ('Run') {
        //     docker.image("localhost:5000/account-service:${env.version}").run('-p 2222:2222 -h account --name account --link discovery')
        // }
 
        // stage ('Final') {
        //     build job: 'customer-service-pipeline', wait: false
        // }   
    } catch (e) {
        // If there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw e
    }  finally {
        // Success or failure, always send notifications
        notifyBuild(currentBuild.result)
    } 
 
}
 
def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def buildUser = getBuildUser()
  def subject = "@channel ${buildStatus}: Job '${env.JOB_NAME} build [${env.BUILD_NUMBER}]' by ${buildUser}\n"
  def summary = "${subject} More info at: (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (channel: '#deployment', color: colorCode, message: summary)
}

def getBuildUser() {
    return currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()
}
